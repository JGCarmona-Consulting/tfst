trigger:
  branches:
    include:
      - dev
  paths:
    include:
      - src/webapp/**

pr: none

variables:
  - group: AzureServiceConnectionDev

pool:
  vmImage: ubuntu-24.04

jobs:
  - job: deploy_webapp
    displayName: "Deploy WebApp to DEV"
    steps:
      # 1. Authenticate and initialize Terraform for infrastructure
      - template: ../templates/terragrunt_init.yml
        parameters:
          subscription: $(SERVICE_CONNECTION_NAME_ARM_DEV)

      # 2. Initialize Terragrunt dependencies (App Service for WebApp)
      - bash: |
          echo "Initializing Terragrunt dependencies for WebApp..."
          cd "$(System.DefaultWorkingDirectory)/infrastructure/envs/dev/app_services/webapp"
          terragrunt run-all init -reconfigure
        displayName: "Initialize Terragrunt Dependencies for WebApp"
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)

      # 3. Detect Angular version and set Node.js dynamically
      - bash: |
          echo "Detecting Angular version..."
          cd $(System.DefaultWorkingDirectory)/src/webapp/TFST-Front
          ANGULAR_VERSION=$(npm list --depth=0 @angular/core | grep @angular/core | awk -F@ '{print $2}')
          echo "Detected Angular Version: $ANGULAR_VERSION"

          # Ensure Angular version is 18.x or higher
          if [[ "$ANGULAR_VERSION" =~ ^18 || "$ANGULAR_VERSION" > "18" ]]; then
            NODE_VERSION="18.x"
          else
            echo "Error: Unsupported Angular version ($ANGULAR_VERSION). Only Angular 18.x or higher is supported."
            exit 1
          fi
          echo "Selected Node.js Version: $NODE_VERSION"

          # Export variable for subsequent steps
          echo "##vso[task.setvariable variable=NODE_VERSION]$NODE_VERSION"
        displayName: "Detect Angular Version and Set Node.js"

      # 4. Install Node.js based on detected Angular version
      - task: NodeTool@0
        displayName: "Install Node.js"
        inputs:
          versionSpec: '$(NODE_VERSION)'
          checkLatest: true

      # 5. Build Angular application
      - bash: |
          echo "Installing npm dependencies..."
          cd $(System.DefaultWorkingDirectory)/src/webapp/TFST-Front
          npm install
        displayName: "Install npm dependencies"

      - bash: |
          echo "Building Angular application for production..."
          cd $(System.DefaultWorkingDirectory)/src/webapp/TFST-Front
          npm run build --prod --output-path=$(Build.ArtifactStagingDirectory)/webapp
        displayName: "Build Angular Application"

      # 6. Verify artifact directory content
      - bash: |
          echo "Listing contents of the build artifact directory..."
          ls -al $(Build.ArtifactStagingDirectory)/webapp
        displayName: "Verify Build Artifacts"

      # 7. Deploy WebApp to Azure App Service
      - task: AzureWebApp@1
        displayName: "Deploy WebApp to Azure App Service"
        inputs:
          azureSubscription: $(SERVICE_CONNECTION_NAME_ARM_DEV)
          appType: 'webApp'
          appName: $(APP_SERVICE_NAME_WEBAPP)
          package: '$(Build.ArtifactStagingDirectory)/webapp'
