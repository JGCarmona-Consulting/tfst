trigger:
  branches:
    include:
      - dev
  paths:
    include:
      - src/webapp/**

pr: none

variables:
  - group: AzureServiceConnectionDev

pool:
  vmImage: ubuntu-24.04

jobs:
  - job: deploy_webapp
    displayName: "Deploy WebApp to DEV"
    steps:
      # Authenticate and initialize Terraform for infrastructure
      - template: ../templates/terragrunt_init.yml
        parameters:
          subscription: $(SERVICE_CONNECTION_NAME_ARM_DEV)

      # Initialize Terragrunt dependencies
      - bash: |
          echo "Initializing Terragrunt dependencies for WebApp..."
          cd "$(System.DefaultWorkingDirectory)/infrastructure/envs/dev/app_services/webapp"
          terragrunt run-all init -reconfigure --terragrunt-non-interactive
        displayName: "Initialize Terragrunt Dependencies for WebApp"
        env:
          ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID)
          ARM_CLIENT_ID: $(ARM_CLIENT_ID)
          ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
          ARM_TENANT_ID: $(ARM_TENANT_ID)

      # Fetch App Service Name for WebApp
      - template: ../templates/fetch_app_service_name.yml
        parameters:
          terragrunt_path: infrastructure/envs/dev/app_services/webapp

      # Install Node.js for Angular 18.x+
      - task: NodeTool@0
        displayName: "Install Node.js 18.x for Angular"
        inputs:
          versionSpec: '18.x'
          checkLatest: true

      # Build Angular application
      - bash: |
          echo "Building Angular application for production..."
          cd $(System.DefaultWorkingDirectory)/src/webapp/TFST-Front
          npm install
          npm run build --prod
        displayName: "Build Angular Application"

      # Prepare deployment artifacts
      - bash: |
          echo "Preparing deployment artifacts..."
          cd $(System.DefaultWorkingDirectory)/src/webapp/TFST-Front
          cp server.js dist/tfst-front/
          cp package.json dist/tfst-front/
          cd dist/tfst-front
          zip -r $(Build.ArtifactStagingDirectory)/webapp.zip .
        displayName: "Prepare Deployment Artifacts"

      # Verify compressed artifact
      - bash: |
          echo "Verifying the compressed artifact..."
          unzip -l $(Build.ArtifactStagingDirectory)/webapp.zip
        displayName: "Verify Compressed Artifact"

      # Deploy WebApp to Azure App Service
      - task: AzureWebApp@1
        displayName: "Deploy WebApp to Azure App Service"
        inputs:
          azureSubscription: $(SERVICE_CONNECTION_NAME_ARM_DEV)
          appType: 'webAppLinux'
          appName: $(APP_SERVICE_NAME)
          package: '$(Build.ArtifactStagingDirectory)/webapp.zip'
          
      # Isntall express on the App Service
      - script: |
          npm install express
        displayName: "Install Express on Azure App Service"